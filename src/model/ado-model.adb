-----------------------------------------------------------------------
--  ADO.Model -- ADO.Model
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2011, 2012 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--  SPDX-License-Identifier: Apache-2.0
-----------------------------------------------------------------------
with ADO.Objects;
package body ADO.Model is

   -- ----------------------------------------
   --  Data object: Sequence
   -- ----------------------------------------
   procedure Set_Name (Object : in out Sequence_Ref;
                        Value : in String) is
   begin
      Object.Id := Ada.Strings.Unbounded.To_Unbounded_String (Value);
   end Set_Name;
   procedure Set_Name (Object : in out Sequence_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Object.Id := Value;
   end Set_Name;
   function Get_Name (Object : in Sequence_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Sequence_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
   begin
      return Object.Id;
   end Get_Name;
   function Get_Version (Object : in Sequence_Ref)
                  return Integer is
   begin
      return Object.Version;
   end Get_Version;
   procedure Set_Value (Object : in out Sequence_Ref;
                        Value  : in ADO.Identifier) is
   begin
      Object.Value := Value;
      Object.Need_Save := True;
   end Set_Value;
   function Get_Value (Object : in Sequence_Ref)
                  return ADO.Identifier is
   begin
      return Object.Value;
   end Get_Value;
   procedure Set_Block_Size (Object : in out Sequence_Ref;
                             Value  : in ADO.Identifier) is
   begin
      Object.Block_Size := Value;
   end Set_Block_Size;
   function Get_Block_Size (Object : in Sequence_Ref)
                  return ADO.Identifier is
   begin
      return Object.Block_Size;
   end Get_Block_Size;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Sequence_Ref;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Id := Stmt.Get_Unbounded_String (0);
      Object.Value := Stmt.Get_Identifier (2);
      Object.Block_Size := Stmt.Get_Identifier (3);
      Object.Version := Stmt.Get_Integer (1);
   end Load;
   procedure Find (Object  : in out Sequence_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (SEQUENCE_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   procedure Save (Object  : in out Sequence_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (SEQUENCE_TABLE'Access);
   begin
--        if Object.Need_Save then
--           Stmt.Save_Field (Name  => COL_0_1_NAME, --  name
--                            Value => Object.Get_Key);
--           Object.Clear_Modified (1);
--        end if;
      if Object.Need_Save then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  value
                          Value => Object.Value);
      end if;
--        if Object.Is_Modified (4) then
--           Stmt.Save_Field (Name  => COL_3_1_NAME, --  block_size
--                            Value => Object.Block_Size);
--           Object.Clear_Modified (4);
--        end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "name = ? and version = ?");
         Stmt.Add_Param (Value => Object.Id);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;
   procedure Create (Object  : in out Sequence_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (SEQUENCE_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_1_NAME, --  name
                        Value => Object.Id);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  value
                        Value => Object.Value);
      Query.Save_Field (Name  => COL_3_1_NAME, --  block_size
                        Value => Object.Block_Size);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
   end Create;

end ADO.Model;
