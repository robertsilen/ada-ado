--  Generated by gperfhash
with Util.Strings.Transforms;
with Interfaces; use Interfaces;

package body PQ.Perfect_Hash is

   P : constant array (0 .. 11) of Natural :=
     (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13);

   T1 : constant array (0 .. 11) of Unsigned_16 :=
     (458, 26, 756, 54, 156, 452, 817, 805, 671, 438, 702, 309);

   T2 : constant array (0 .. 11) of Unsigned_16 :=
     (535, 198, 250, 162, 35, 640, 58, 730, 487, 363, 193, 648);

   G : constant array (0 .. 832) of Unsigned_16 :=
     (366, 0, 96, 0, 0, 0, 0, 0, 0, 108, 0, 248, 367, 192, 0, 119, 0, 3,
      259, 0, 31, 230, 0, 0, 0, 0, 0, 202, 0, 0, 243, 0, 0, 0, 0, 7, 104, 0,
      0, 0, 0, 0, 322, 0, 0, 279, 0, 0, 301, 0, 290, 169, 0, 211, 44, 0, 0,
      134, 0, 0, 358, 200, 309, 0, 69, 410, 0, 0, 0, 0, 0, 8, 305, 0, 0, 0,
      228, 0, 0, 0, 46, 302, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 74, 339, 0, 90,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 103, 0, 0, 267, 68, 0,
      0, 83, 0, 0, 0, 0, 0, 381, 71, 0, 261, 249, 204, 96, 278, 0, 0, 0, 0,
      0, 117, 41, 0, 156, 339, 0, 0, 0, 0, 13, 0, 0, 0, 98, 0, 0, 0, 0, 2,
      73, 0, 30, 69, 272, 0, 26, 0, 0, 220, 0, 20, 0, 127, 0, 0, 0, 0, 0,
      199, 0, 148, 37, 340, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 136, 0, 65, 146,
      301, 16, 0, 200, 0, 0, 0, 0, 0, 223, 111, 0, 0, 0, 0, 0, 0, 275, 319,
      6, 0, 200, 0, 0, 0, 28, 225, 0, 0, 152, 13, 325, 256, 92, 0, 33, 235,
      0, 307, 276, 187, 0, 37, 0, 0, 163, 324, 94, 0, 406, 0, 0, 132, 0, 0,
      0, 0, 0, 0, 0, 0, 53, 0, 0, 313, 239, 105, 365, 0, 0, 0, 0, 120, 0, 0,
      373, 403, 100, 227, 0, 0, 100, 376, 0, 0, 0, 0, 90, 0, 0, 150, 0, 41,
      0, 0, 0, 88, 242, 0, 94, 0, 0, 0, 0, 0, 299, 101, 256, 0, 217, 0, 0,
      0, 54, 261, 0, 0, 135, 24, 145, 236, 371, 67, 0, 0, 69, 0, 166, 0, 0,
      0, 61, 91, 0, 80, 413, 269, 0, 0, 0, 0, 268, 228, 30, 111, 229, 243,
      267, 236, 0, 0, 40, 414, 42, 0, 401, 305, 0, 33, 0, 171, 342, 287,
      130, 0, 348, 0, 338, 320, 290, 139, 0, 0, 205, 248, 0, 0, 243, 56, 0,
      214, 0, 0, 0, 0, 0, 249, 0, 0, 48, 117, 381, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 17, 358, 0, 270, 0, 401, 109, 94, 0, 0, 0, 0, 0, 7, 0, 5, 173,
      0, 0, 343, 116, 0, 284, 0, 0, 51, 381, 79, 312, 146, 154, 217, 0, 0,
      0, 0, 32, 23, 120, 0, 156, 0, 21, 0, 217, 237, 0, 151, 365, 0, 0, 0,
      258, 378, 0, 387, 0, 34, 116, 0, 13, 212, 115, 0, 0, 406, 0, 0, 333,
      0, 1, 0, 256, 0, 0, 0, 0, 23, 283, 218, 407, 27, 0, 4, 0, 0, 260, 0,
      82, 115, 18, 363, 0, 226, 112, 237, 132, 62, 0, 0, 0, 0, 143, 296, 43,
      285, 131, 16, 386, 0, 129, 0, 96, 0, 0, 79, 388, 30, 390, 0, 404, 0,
      0, 100, 130, 0, 0, 381, 1, 341, 0, 52, 0, 173, 0, 0, 103, 352, 0, 0,
      145, 363, 0, 0, 0, 49, 251, 201, 0, 182, 375, 382, 0, 97, 284, 121, 0,
      3, 0, 0, 267, 0, 1, 336, 0, 0, 405, 243, 127, 68, 0, 0, 299, 0, 0, 0,
      0, 25, 0, 169, 0, 103, 0, 277, 24, 0, 102, 0, 337, 253, 0, 0, 0, 0,
      281, 36, 0, 308, 337, 88, 0, 0, 0, 0, 107, 359, 310, 0, 0, 0, 104, 0,
      0, 35, 114, 0, 0, 37, 175, 232, 0, 336, 158, 288, 0, 0, 269, 0, 0, 90,
      134, 0, 0, 367, 0, 281, 0, 346, 252, 62, 0, 358, 0, 317, 389, 0, 254,
      0, 67, 165, 398, 0, 0, 0, 167, 0, 0, 94, 0, 45, 389, 0, 0, 307, 0,
      344, 0, 0, 144, 174, 0, 75, 0, 0, 381, 0, 4, 74, 303, 188, 0, 21, 379,
      0, 0, 0, 0, 0, 258, 270, 310, 353, 0, 185, 91, 353, 108, 0, 295, 56,
      365, 341, 108, 19, 0, 0, 0, 0, 96, 266, 0, 0, 285, 211, 0, 104, 0, 0,
      298, 0, 74, 71, 0, 108, 0, 0, 48, 47, 294, 349, 0, 160, 130, 0, 320,
      277, 0, 0, 0, 386, 233, 268, 413, 153, 12, 26, 0, 222, 293, 45, 0,
      267, 249, 47, 0, 0, 265, 257, 0, 0, 0, 377, 0, 0, 150, 0, 279, 192, 0,
      287, 0, 169, 273, 276, 38, 79, 90, 218, 0, 378, 0, 0, 0, 386, 367, 0,
      149, 0, 278, 0, 295, 106, 321, 334, 107, 165, 31, 0, 366, 316, 0, 0,
      0, 296, 0, 191, 71, 36, 0, 0, 0, 0, 0, 376, 0, 243, 84, 349, 349, 0,
      0, 0, 0, 0, 413, 0, 69, 374, 215, 0, 265, 274, 47, 245, 63, 110, 379);

   function Hash (S : String) return Natural is
      F : constant Natural := S'First - 1;
      L : constant Natural := S'Length;
      F1, F2 : Natural := 0;
      J : Natural;
   begin
      for K in P'Range loop
         exit when L < P (K);
         J  := Character'Pos (S (P (K) + F));
         F1 := (F1 + Natural (T1 (K)) * J) mod 833;
         F2 := (F2 + Natural (T2 (K)) * J) mod 833;
      end loop;
      return (Natural (G (F1)) + Natural (G (F2))) mod 416;
   end Hash;

   --  Returns true if the string <b>S</b> is a keyword.
   function Is_Keyword (S : in String) return Boolean is
      K : constant String := Util.Strings.Transforms.To_Upper_Case (S);
      H : constant Natural := Hash (K);
   begin
      return Keywords (H).all = K;
   end Is_Keyword;
end PQ.Perfect_Hash;
