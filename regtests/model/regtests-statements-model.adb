-----------------------------------------------------------------------
--  Regtests.Statements.Model -- Regtests.Statements.Model
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2021 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
package body Regtests.Statements.Model is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   pragma Warnings (Off, "formal parameter * is not referenced");

   function Nullable_Table_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => NULLABLE_TABLE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Nullable_Table_Key;

   function Nullable_Table_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => NULLABLE_TABLE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Nullable_Table_Key;

   function "=" (Left, Right : Nullable_Table_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Nullable_Table_Ref'Class;
                        Impl   : out Nullable_Table_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Nullable_Table_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Nullable_Table_Ref) is
      Impl : Nullable_Table_Access;
   begin
      Impl := new Nullable_Table_Impl;
      Impl.Version := 0;
      Impl.Id_Value := ADO.NO_IDENTIFIER;
      Impl.Int_Value.Is_Null := True;
      Impl.Bool_Value.Is_Null := True;
      Impl.String_Value.Is_Null := True;
      Impl.Time_Value.Is_Null := True;
      Impl.Entity_Value.Is_Null := True;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Nullable_Table
   -- ----------------------------------------

   procedure Set_Id (Object : in out Nullable_Table_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Nullable_Table_Ref)
                  return ADO.Identifier is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Nullable_Table_Ref)
                  return Integer is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Id_Value (Object : in out Nullable_Table_Ref;
                           Value  : in ADO.Identifier) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 3, Impl.Id_Value, Value);
   end Set_Id_Value;

   function Get_Id_Value (Object : in Nullable_Table_Ref)
                  return ADO.Identifier is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Id_Value;
   end Get_Id_Value;


   procedure Set_Int_Value (Object : in out Nullable_Table_Ref;
                            Value  : in ADO.Nullable_Integer) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 4, Impl.Int_Value, Value);
   end Set_Int_Value;

   function Get_Int_Value (Object : in Nullable_Table_Ref)
                  return ADO.Nullable_Integer is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Int_Value;
   end Get_Int_Value;


   procedure Set_Bool_Value (Object : in out Nullable_Table_Ref;
                             Value  : in ADO.Nullable_Boolean) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Boolean (Impl.all, 5, Impl.Bool_Value, Value);
   end Set_Bool_Value;

   function Get_Bool_Value (Object : in Nullable_Table_Ref)
                  return ADO.Nullable_Boolean is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Bool_Value;
   end Get_Bool_Value;


   procedure Set_String_Value (Object : in out Nullable_Table_Ref;
                                Value : in String) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 6, Impl.String_Value, Value);
   end Set_String_Value;

   procedure Set_String_Value (Object : in out Nullable_Table_Ref;
                               Value  : in ADO.Nullable_String) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 6, Impl.String_Value, Value);
   end Set_String_Value;

   function Get_String_Value (Object : in Nullable_Table_Ref)
                 return String is
      Value : constant ADO.Nullable_String := Object.Get_String_Value;
   begin
      if Value.Is_Null then
         return "";
      else
         return Ada.Strings.Unbounded.To_String (Value.Value);
      end if;
   end Get_String_Value;
   function Get_String_Value (Object : in Nullable_Table_Ref)
                  return ADO.Nullable_String is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.String_Value;
   end Get_String_Value;


   procedure Set_Time_Value (Object : in out Nullable_Table_Ref;
                             Value  : in ADO.Nullable_Time) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Time_Value, Value);
   end Set_Time_Value;

   function Get_Time_Value (Object : in Nullable_Table_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Time_Value;
   end Get_Time_Value;


   procedure Set_Entity_Value (Object : in out Nullable_Table_Ref;
                               Value  : in ADO.Nullable_Entity_Type) is
      Impl : Nullable_Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Entity_Type (Impl.all, 8, Impl.Entity_Value, Value);
   end Set_Entity_Value;

   function Get_Entity_Value (Object : in Nullable_Table_Ref)
                  return ADO.Nullable_Entity_Type is
      Impl : constant Nullable_Table_Access
         := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Entity_Value;
   end Get_Entity_Value;

   --  Copy of the object.
   procedure Copy (Object : in Nullable_Table_Ref;
                   Into   : in out Nullable_Table_Ref) is
      Result : Nullable_Table_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Nullable_Table_Access
              := Nullable_Table_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Nullable_Table_Access
              := new Nullable_Table_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Id_Value := Impl.Id_Value;
            Copy.Int_Value := Impl.Int_Value;
            Copy.Bool_Value := Impl.Bool_Value;
            Copy.String_Value := Impl.String_Value;
            Copy.Time_Value := Impl.Time_Value;
            Copy.Entity_Value := Impl.Entity_Value;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Nullable_Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Nullable_Table_Access := new Nullable_Table_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Nullable_Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Nullable_Table_Access := new Nullable_Table_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Nullable_Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Nullable_Table_Access := new Nullable_Table_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Nullable_Table_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Nullable_Table_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Nullable_Table_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Nullable_Table_Impl) is
      type Nullable_Table_Impl_Ptr is access all Nullable_Table_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Nullable_Table_Impl, Nullable_Table_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Nullable_Table_Impl_Ptr := Nullable_Table_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Nullable_Table_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, NULLABLE_TABLE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Nullable_Table_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Nullable_Table_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (NULLABLE_TABLE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  ID
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  ID_VALUE
                          Value => Object.Id_Value);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  INT_VALUE
                          Value => Object.Int_Value);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  BOOL_VALUE
                          Value => Object.Bool_Value);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  STRING_VALUE
                          Value => Object.String_Value);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  TIME_VALUE
                          Value => Object.Time_Value);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  ENTITY_VALUE
                          Value => Object.Entity_Value);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Nullable_Table_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (NULLABLE_TABLE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  ID
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  ID_VALUE
                        Value => Object.Id_Value);
      Query.Save_Field (Name  => COL_3_1_NAME, --  INT_VALUE
                        Value => Object.Int_Value);
      Query.Save_Field (Name  => COL_4_1_NAME, --  BOOL_VALUE
                        Value => Object.Bool_Value);
      Query.Save_Field (Name  => COL_5_1_NAME, --  STRING_VALUE
                        Value => Object.String_Value);
      Query.Save_Field (Name  => COL_6_1_NAME, --  TIME_VALUE
                        Value => Object.Time_Value);
      Query.Save_Field (Name  => COL_7_1_NAME, --  ENTITY_VALUE
                        Value => Object.Entity_Value);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Nullable_Table_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (NULLABLE_TABLE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Nullable_Table_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Nullable_Table_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Nullable_Table_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "id_value" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Id_Value));
      elsif Name = "int_value" then
         if Impl.Int_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Int_Value.Value));
         end if;
      elsif Name = "bool_value" then
         if Impl.Bool_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Impl.Bool_Value.Value);
         end if;
      elsif Name = "string_value" then
         if Impl.String_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Impl.String_Value.Value);
         end if;
      elsif Name = "time_value" then
         if Impl.Time_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Time_Value.Value);
         end if;
      elsif Name = "entity_value" then
         if Impl.Entity_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Entity_Value.Value));
         end if;
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Nullable_Table_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, NULLABLE_TABLE_DEF'Access);
   begin
      Stmt.Execute;
      Nullable_Table_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Nullable_Table_Ref;
            Impl : constant Nullable_Table_Access := new Nullable_Table_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Nullable_Table_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Id_Value := Stmt.Get_Identifier (2);
      Object.Int_Value := Stmt.Get_Nullable_Integer (3);
      Object.Bool_Value := Stmt.Get_Nullable_Boolean (4);
      Object.String_Value := Stmt.Get_Nullable_String (5);
      Object.Time_Value := Stmt.Get_Nullable_Time (6);
      Object.Entity_Value := Stmt.Get_Nullable_Entity_Type (7);
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Table_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => TABLE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Table_Key;

   function Table_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => TABLE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Table_Key;

   function "=" (Left, Right : Table_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Table_Ref'Class;
                        Impl   : out Table_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Table_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Table_Ref) is
      Impl : Table_Access;
   begin
      Impl := new Table_Impl;
      Impl.Version := 0;
      Impl.Id_Value := ADO.NO_IDENTIFIER;
      Impl.Int_Value := 0;
      Impl.Bool_Value := False;
      Impl.Time_Value := ADO.DEFAULT_TIME;
      Impl.Entity_Value := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Table
   -- ----------------------------------------

   procedure Set_Id (Object : in out Table_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Table_Ref)
                  return ADO.Identifier is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Table_Ref)
                  return Integer is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Id_Value (Object : in out Table_Ref;
                           Value  : in ADO.Identifier) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 3, Impl.Id_Value, Value);
   end Set_Id_Value;

   function Get_Id_Value (Object : in Table_Ref)
                  return ADO.Identifier is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Id_Value;
   end Get_Id_Value;


   procedure Set_Int_Value (Object : in out Table_Ref;
                            Value  : in Integer) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 4, Impl.Int_Value, Value);
   end Set_Int_Value;

   function Get_Int_Value (Object : in Table_Ref)
                  return Integer is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Int_Value;
   end Get_Int_Value;


   procedure Set_Bool_Value (Object : in out Table_Ref;
                             Value  : in Boolean) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Boolean (Impl.all, 5, Impl.Bool_Value, Value);
   end Set_Bool_Value;

   function Get_Bool_Value (Object : in Table_Ref)
                  return Boolean is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Bool_Value;
   end Get_Bool_Value;


   procedure Set_String_Value (Object : in out Table_Ref;
                                Value : in String) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 6, Impl.String_Value, Value);
   end Set_String_Value;

   procedure Set_String_Value (Object : in out Table_Ref;
                               Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 6, Impl.String_Value, Value);
   end Set_String_Value;

   function Get_String_Value (Object : in Table_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_String_Value);
   end Get_String_Value;
   function Get_String_Value (Object : in Table_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.String_Value;
   end Get_String_Value;


   procedure Set_Time_Value (Object : in out Table_Ref;
                             Value  : in Ada.Calendar.Time) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Time_Value, Value);
   end Set_Time_Value;

   function Get_Time_Value (Object : in Table_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Time_Value;
   end Get_Time_Value;


   procedure Set_Entity_Value (Object : in out Table_Ref;
                               Value  : in ADO.Entity_Type) is
      Impl : Table_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Entity_Type (Impl.all, 8, Impl.Entity_Value, Value);
   end Set_Entity_Value;

   function Get_Entity_Value (Object : in Table_Ref)
                  return ADO.Entity_Type is
      Impl : constant Table_Access
         := Table_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Entity_Value;
   end Get_Entity_Value;

   --  Copy of the object.
   procedure Copy (Object : in Table_Ref;
                   Into   : in out Table_Ref) is
      Result : Table_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Table_Access
              := Table_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Table_Access
              := new Table_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Id_Value := Impl.Id_Value;
            Copy.Int_Value := Impl.Int_Value;
            Copy.Bool_Value := Impl.Bool_Value;
            Copy.String_Value := Impl.String_Value;
            Copy.Time_Value := Impl.Time_Value;
            Copy.Entity_Value := Impl.Entity_Value;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Table_Access := new Table_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Table_Access := new Table_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Table_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Table_Access := new Table_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Table_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Table_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Table_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Table_Impl) is
      type Table_Impl_Ptr is access all Table_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Table_Impl, Table_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Table_Impl_Ptr := Table_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Table_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, TABLE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Table_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Table_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (TABLE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  ID
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  ID_VALUE
                          Value => Object.Id_Value);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  INT_VALUE
                          Value => Object.Int_Value);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  BOOL_VALUE
                          Value => Object.Bool_Value);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  STRING_VALUE
                          Value => Object.String_Value);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  TIME_VALUE
                          Value => Object.Time_Value);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  ENTITY_VALUE
                          Value => Object.Entity_Value);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Table_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (TABLE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  ID
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  ID_VALUE
                        Value => Object.Id_Value);
      Query.Save_Field (Name  => COL_3_2_NAME, --  INT_VALUE
                        Value => Object.Int_Value);
      Query.Save_Field (Name  => COL_4_2_NAME, --  BOOL_VALUE
                        Value => Object.Bool_Value);
      Query.Save_Field (Name  => COL_5_2_NAME, --  STRING_VALUE
                        Value => Object.String_Value);
      Query.Save_Field (Name  => COL_6_2_NAME, --  TIME_VALUE
                        Value => Object.Time_Value);
      Query.Save_Field (Name  => COL_7_2_NAME, --  ENTITY_VALUE
                        Value => Object.Entity_Value);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Table_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (TABLE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Table_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Table_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Table_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "id_value" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Id_Value));
      elsif Name = "int_value" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Int_Value));
      elsif Name = "bool_value" then
         return Util.Beans.Objects.To_Object (Impl.Bool_Value);
      elsif Name = "string_value" then
         return Util.Beans.Objects.To_Object (Impl.String_Value);
      elsif Name = "time_value" then
         return Util.Beans.Objects.Time.To_Object (Impl.Time_Value);
      elsif Name = "entity_value" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Entity_Value));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Table_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, TABLE_DEF'Access);
   begin
      Stmt.Execute;
      Table_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Table_Ref;
            Impl : constant Table_Access := new Table_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Table_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Id_Value := Stmt.Get_Identifier (2);
      Object.Int_Value := Stmt.Get_Integer (3);
      Object.Bool_Value := Stmt.Get_Boolean (4);
      Object.String_Value := Stmt.Get_Unbounded_String (5);
      Object.Time_Value := Stmt.Get_Time (6);
      Object.Entity_Value := ADO.Entity_Type (Stmt.Get_Integer (7));
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;


end Regtests.Statements.Model;
